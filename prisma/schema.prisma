generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN

  @@map("roles")
}

model User {
  id String @id @default(nanoid(12))

  username String  @unique
  name     String?

  password String
  role     Role   @default(USER)

  language String @default("de")

  email String?

  times Time[]
  chips Chip[]

  assignedTodos Todo[] @relation("assignee_to_todo")
  createdTodos  Todo[] @relation("creator")

  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")

  ip         String
  user_agent String

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Chip {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chips")
}

model Time {
  id String @id @default(nanoid(12))

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  start     DateTime  @db.DateTime(2)
  startType String?   @map("start_type") @db.Text
  end       DateTime? @db.DateTime(2)
  endType   String?   @map("end_type") @db.Text

  time     String? // Passed time from start to end
  notes    String? @db.MediumText
  invoiced Boolean @default(false)

  traveledDistance Int? @map("traveled_distance") // Stored in km

  materials String @default("[]") // Array of materials used [{"name":_,"price":_}]

  project     Project? @relation(fields: [projectName], references: [name], onDelete: SetNull) // Related Project
  projectName String?  @map("project_name")

  @@map("times")
}

model Project {
  name        String  @id @unique
  description String?

  todos Todo[] @relation("project_to_todo") // Related Todos
  times Time[] // Related Times

  @@map("projects")
}

enum TodoPriority {
  HIGH
  MEDIUM
  LOW

  @@map("todo_priorities")
}

enum TodoStatus {
  TODO
  IN_PROGRESS
  DONE

  @@map("todo_statuses")
}

model Todo {
  id String @id @default(nanoid(12))

  task        String       @db.MediumText
  description String?      @db.Text
  status      TodoStatus   @default(TODO)
  archived    Boolean      @default(false)
  hidden      Boolean      @default(false)
  priority    TodoPriority @default(MEDIUM)
  deadline    DateTime?

  relatedProjects Project[] @relation("project_to_todo") // Any related projects to this todo

  assignees User[] @relation("assignee_to_todo") // Assigned users of the todo

  creator   User   @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @map("creator_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todos")
}
