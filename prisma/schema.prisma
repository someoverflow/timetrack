generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// #region User
enum Role {
  USER // Arbeiter
  ADMIN // Arbeitgeber
  CUSTOMER // Kunden Konto

  @@map("roles")
}

model User {
  id String @id @default(nanoid(12))

  username String  @unique
  name     String?

  password String
  role     Role   @default(USER)

  language String @default("de")

  email              String?
  emailVerified      Boolean @default(false) // TODO
  ticketUpdateMail   Boolean @default(true) @map("ticket_update_mail")
  ticketCreationMail Boolean @default(true) @map("ticket_creation_mail")
  historyExportMail  Boolean @default(true) @map("history_export_mail")

  customer     Customer? @relation(fields: [customerName], references: [name], onDelete: Cascade)
  customerName String?

  times Time[]
  chips Chip[]

  assignedTickets Ticket[] @relation("assignee_to_todo")
  createdTickets  Ticket[] @relation("creator")
  updatedTickets  Ticket[]

  ticketUploads TicketUpload[]

  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")

  createdAt DateTime @default(now())

  ip         String
  user_agent String

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Chip {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chips")
}

// #endregion

// #region Customer & Project
model Customer {
  name String @id

  projects Project[]
  users    User[]

  @@map("customers")
}

model Project {
  name        String  @id @unique
  description String?

  customer     Customer? @relation(fields: [customerName], references: [name], onDelete: SetNull)
  customerName String?

  todos Ticket[] @relation("project_to_todo") // Related Todos
  times Time[] // Related Times

  @@map("projects")
}

// #endregion

model Time {
  id String @id @default(nanoid(12))

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  start     DateTime  @db.DateTime(2)
  startType String?   @map("start_type") @db.Text
  end       DateTime? @db.DateTime(2)
  endType   String?   @map("end_type") @db.Text

  breakTime Float @default(0) @map("break_time")

  time     String? // Passed time from start to end
  notes    String? @db.MediumText
  invoiced Boolean @default(false)

  traveledDistance Int? @map("traveled_distance") // Stored in km

  materials String @default("[]") // TODO: Array of materials used [{"name":_,"price":_}]

  project     Project? @relation(fields: [projectName], references: [name], onDelete: SetNull) // Related Project
  projectName String?  @map("project_name")

  @@map("times")
}

// #region Ticket
enum TicketPriority {
  HIGH
  MEDIUM
  LOW

  @@map("todo_priorities")
}

enum TicketStatus {
  TODO
  IN_PROGRESS
  DONE

  @@map("todo_statuses")
}

model TicketUpload {
  id String @id @default(nanoid(12))

  type      String
  extension String
  size      BigInt
  name      String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String
}

model Ticket {
  id String @id @default(nanoid(12))

  task        String         @db.MediumText
  description String?        @db.Text
  status      TicketStatus   @default(TODO)
  archived    Boolean        @default(false)
  hidden      Boolean        @default(false)
  priority    TicketPriority @default(MEDIUM)
  deadline    DateTime?

  uploads TicketUpload[]

  projects  Project[] @relation("project_to_todo") // Any related projects to this todo
  assignees User[]    @relation("assignee_to_todo") // Assigned users of the todo

  creator   User   @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @map("creator_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  updatedBy   User?   @relation(fields: [updatedById], references: [id])
  updatedById String?

  @@map("todos")
}

// #endregion
