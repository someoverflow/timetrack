generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Time {
  id String @id @default(nanoid(10))

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  start     DateTime  @db.DateTime(2)
  startType String?   @map("start_type") @db.Text
  end       DateTime? @db.DateTime(2)
  endType   String?   @map("end_type") @db.Text

  time  String? // Passed time from start to end
  notes String? @db.MediumText

  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull) // Related Project
  projectId String?  @map("project_id")

  @@map("times")
}

model Project {
  id String @id @default(nanoid(8))

  name        String
  description String?

  todos Todo[] // Related Todos
  times Time[] // Related Times
  users User[] // Users with this project

  @@map("projects")
}

model Todo {
  id String @id @default(nanoid(8))

  task        String  @db.MediumText
  description String? @db.Text

  deadline DateTime?

  done       Boolean @default(false) // Finish todo
  inProgress Boolean @default(false) @map("in_progress") // Progressing the todo 
  archived   Boolean @default(false) // Finished the todo
  trash      Boolean @default(false) // Hidden, can be toggled after archived

  relatedProjects Project[] // Any related projects to this todo

  assignees User[] @relation("assignee") // Assigned users of the todo

  creator   User?   @relation("creator", fields: [creatorId], references: [id], onDelete: Restrict)
  creatorId String? @map("creator_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todos")
}

model Chip {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chips")
}

enum Role {
  USER
  ADMIN

  @@map("roles")
}

model User {
  id String @id @default(nanoid(8))

  username String  @unique
  name     String?

  password String
  role     Role   @default(USER)

  email         String?   @unique
  emailVerified DateTime? @map("email_verified")

  validJwtId String @default(uuid()) @map("valid_jwt_id")

  times Time[]
  chips Chip[]

  projects Project[]

  assignedTodos Todo[] @relation("assignee")
  createdTodos  Todo[] @relation("creator")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
